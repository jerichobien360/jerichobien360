import React, { useState, useEffect } from 'react';

const CodingStreakTracker = () => {
  const [streakData, setStreakData] = useState({
    currentStreak: 0,
    longestStreak: 0,
    totalDays: 0,
    weeklyActivity: [],
    monthlyActivity: [],
    lastCommitDate: null
  });

  // Generate sample streak data
  useEffect(() => {
    const generateStreakData = () => {
      const today = new Date();
      const weeklyActivity = [];
      const monthlyActivity = [];
      
      // Generate last 7 days
      for (let i = 6; i >= 0; i--) {
        const date = new Date(today);
        date.setDate(today.getDate() - i);
        const hasActivity = Math.random() > 0.2; // 80% chance of activity
        
        weeklyActivity.push({
          date: date.toISOString().split('T')[0],
          day: date.toLocaleDateString('en-US', { weekday: 'short' }),
          hasActivity,
          commits: hasActivity ? Math.floor(Math.random() * 15) + 1 : 0
        });
      }
      
      // Generate last 12 weeks for monthly view
      for (let week = 11; week >= 0; week--) {
        const weekData = [];
        for (let day = 0; day < 7; day++) {
          const date = new Date(today);
          date.setDate(today.getDate() - (week * 7) - (6 - day));
          const hasActivity = Math.random() > 0.25;
          
          weekData.push({
            date: date.toISOString().split('T')[0],
            hasActivity,
            commits: hasActivity ? Math.floor(Math.random() * 10) + 1 : 0
          });
        }
        monthlyActivity.push(weekData);
      }
      
      // Calculate current streak
      let currentStreak = 0;
      for (let i = weeklyActivity.length - 1; i >= 0; i--) {
        if (weeklyActivity[i].hasActivity) {
          currentStreak++;
        } else {
          break;
        }
      }
      
      setStreakData({
        currentStreak: currentStreak,
        longestStreak: Math.max(currentStreak + Math.floor(Math.random() * 20), currentStreak),
        totalDays: weeklyActivity.filter(day => day.hasActivity).length + Math.floor(Math.random() * 200),
        weeklyActivity,
        monthlyActivity,
        lastCommitDate: weeklyActivity[weeklyActivity.length - 1].date
      });
    };

    generateStreakData();
  }, []);

  const getActivityColor = (commits) => {
    if (commits === 0) return 'bg-gray-800';
    if (commits <= 2) return 'bg-green-900';
    if (commits <= 5) return 'bg-green-700';
    if (commits <= 10) return 'bg-green-500';
    return 'bg-green-300';
  };

  const getStreakEmoji = (streak) => {
    if (streak >= 30) return 'üî•';
    if (streak >= 14) return '‚ö°';
    if (streak >= 7) return 'üåü';
    if (streak >= 3) return 'üí™';
    return 'üå±';
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', { 
      month: 'short', 
      day: 'numeric' 
    });
  };

  return (
    <div className="min-h-screen bg-gray-900 text-white p-6">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold mb-2">
            {getStreakEmoji(streakData.currentStreak)} Coding Streak
          </h1>
          <p className="text-gray-400">Stay consistent, stay strong</p>
        </div>

        {/* Main Streak Counter */}
        <div className="bg-gradient-to-r from-green-600 to-blue-600 rounded-2xl p-8 mb-8 text-center">
          <div className="text-6xl font-bold mb-2">{streakData.currentStreak}</div>
          <div className="text-xl mb-4">Day Current Streak</div>
          {streakData.lastCommitDate && (
            <div className="text-sm opacity-80">
              Last commit: {formatDate(streakData.lastCommitDate)}
            </div>
          )}
        </div>

        {/* Streak Stats */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
          <div className="bg-gray-800 rounded-lg p-6 text-center">
            <div className="text-3xl font-bold text-yellow-400 mb-2">{streakData.longestStreak}</div>
            <div className="text-sm text-gray-400">Longest Streak</div>
          </div>
          <div className="bg-gray-800 rounded-lg p-6 text-center">
            <div className="text-3xl font-bold text-blue-400 mb-2">{streakData.totalDays}</div>
            <div className="text-sm text-gray-400">Total Active Days</div>
          </div>
          <div className="bg-gray-800 rounded-lg p-6 text-center">
            <div className="text-3xl font-bold text-green-400 mb-2">
              {Math.round((streakData.totalDays / 365) * 100)}%
            </div>
            <div className="text-sm text-gray-400">This Year</div>
          </div>
        </div>

        {/* Weekly Activity */}
        <div className="bg-gray-800 rounded-lg p-6 mb-8">
          <h3 className="text-xl font-semibold mb-4">This Week</h3>
          <div className="flex justify-between items-end space-x-2">
            {streakData.weeklyActivity.map((day, index) => (
              <div key={index} className="flex flex-col items-center">
                <div className="text-xs text-gray-400 mb-2">{day.day}</div>
                <div 
                  className={`w-8 h-8 rounded-md ${getActivityColor(day.commits)} flex items-center justify-center text-xs font-bold transition-all duration-300 hover:scale-110`}
                  title={`${day.commits} commits on ${formatDate(day.date)}`}
                >
                  {day.commits > 0 ? day.commits : ''}
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Monthly Activity Grid */}
        <div className="bg-gray-800 rounded-lg p-6">
          <h3 className="text-xl font-semibold mb-4">Last 12 Weeks</h3>
          <div className="grid grid-cols-7 gap-1 mb-4">
            {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (
              <div key={day} className="text-xs text-gray-400 text-center p-1">{day}</div>
            ))}
          </div>
          <div className="space-y-1">
            {streakData.monthlyActivity.map((week, weekIndex) => (
              <div key={weekIndex} className="grid grid-cols-7 gap-1">
                {week.map((day, dayIndex) => (
                  <div
                    key={dayIndex}
                    className={`w-4 h-4 rounded-sm ${getActivityColor(day.commits)} transition-all duration-300 hover:scale-125`}
                    title={`${day.commits} commits on ${formatDate(day.date)}`}
                  />
                ))}
              </div>
            ))}
          </div>
          
          {/* Legend */}
          <div className="flex items-center justify-center space-x-2 mt-4 text-xs text-gray-400">
            <span>Less</span>
            <div className="flex space-x-1">
              <div className="w-3 h-3 bg-gray-800 rounded-sm"></div>
              <div className="w-3 h-3 bg-green-900 rounded-sm"></div>
              <div className="w-3 h-3 bg-green-700 rounded-sm"></div>
              <div className="w-3 h-3 bg-green-500 rounded-sm"></div>
              <div className="w-3 h-3 bg-green-300 rounded-sm"></div>
            </div>
            <span>More</span>
          </div>
        </div>

        {/* Motivation Section */}
        <div className="text-center mt-8">
          <div className="bg-gray-800 rounded-lg p-6">
            <h3 className="text-lg font-semibold mb-2">Keep Going! üí™</h3>
            <p className="text-gray-400 mb-4">
              {streakData.currentStreak === 0 
                ? "Start your streak today! Every journey begins with a single commit." 
                : streakData.currentStreak < 7 
                ? "Great start! You're building momentum." 
                : streakData.currentStreak < 30 
                ? "You're on fire! Keep the streak alive." 
                : "Incredible dedication! You're a coding machine! üî•"}
            </p>
            <div className="flex justify-center space-x-4 text-sm">
              <div className="flex items-center space-x-1">
                <span className="text-green-400">‚óè</span>
                <span>Commit today</span>
              </div>
              <div className="flex items-center space-x-1">
                <span className="text-blue-400">‚óè</span>
                <span>Build habits</span>
              </div>
              <div className="flex items-center space-x-1">
                <span className="text-yellow-400">‚óè</span>
                <span>Stay consistent</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CodingStreakTracker;
